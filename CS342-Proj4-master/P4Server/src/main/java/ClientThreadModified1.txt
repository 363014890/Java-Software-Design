import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.function.Consumer;

import javafx.application.Platform;
import javafx.scene.control.ListView;


public class Server{

	int count = 1;	
	ArrayList<ClientThread> clients = new ArrayList<ClientThread>();
	TheServer server;
	private Consumer<Serializable> callback;
	
	Server(Consumer<Serializable> call){
	
		callback = call;
		server = new TheServer();
		server.start();
	}
	
	
	public class TheServer extends Thread{
		
		public void run() {
		
			try(ServerSocket mysocket = new ServerSocket(5555);){
		    System.out.println("Server is waiting for a client!");
			
		    while(true) {
		
				ClientThread c = new ClientThread(mysocket.accept());
				callback.accept("client has connected to server: " + "client #" + count);
				clients.add(c);
				c.start();
				
				count++;
				
			    }
			}//end of try
				catch(Exception e) {
					callback.accept("Server socket did not launch");
				}
			}//end of while
		}	
// ******************* ( feel free to edit:) )************
		class ClientThread extends Thread{
			
			Gameinfo gi;
			Socket connection;
			ObjectInputStream in;
			ObjectOutputStream out;
			
			ClientThread(Socket s){
				this.connection = s;	
			}
			
			public void updateAllClients() {
				for(int i = 0; i < clients.size(); i++) {
					ClientThread t = clients.get(i);
					try {
					 t.out.writeObject(gi);
					 t.out.reset();
					}
					catch(Exception e) {}
				}	
			}
			
			public void updateSpecificClient( Gameinfo gi) {
					ClientThread t = clients.get(gi.player);
					try {
					 t.out.writeObject(gi);
					}
					catch(Exception e) {}
			} 
			
			public void run() {
					
				try {
					in = new ObjectInputStream(connection.getInputStream());
					out = new ObjectOutputStream(connection.getOutputStream());
					connection.setTcpNoDelay(true);
					
					try { 
						gi = (Gameinfo) in.readObject();
						gi.onlinePlayers.set(gi.player, 1); // makes the player status as available
						} catch( IOException | ClassNotFoundException e) {}
					
					System.out.println("SERVER: Set up streams with client" + (clients.size()+1) );
					
					if(gi.opp_id == -1) { // if there are no opponents at this moment
						synchronized(this) {
						    try {
						        this.wait();
						    } catch (Exception e) {
						    }
						}
					}
					updateSpecificClient(gi);
				}
				
				catch(Exception e) {
					System.out.println("Streams not open");
				}
				
				
				// System.out.println( "Closing connections");
				// closeConnection();
				}//end of run
			
//			 public void closeConnection() {
//		    	 try {
//		    		 out.close();
//		    		 in.close();
//		    		 connection.close();
//		    	 } catch( IOException e ) {
//		    		 e.printStackTrace();
//		    		 }
//		    	 }
			
		}//end of client thread
		
		
		
		public class Gameinfo implements Serializable {
			
			/**
			 * 
			 */
			public Gameinfo(int p) {
				// TODO Auto-generated constructor stub
				player = p;
				opp_id = -1;
				player_plays = new String();
				opp_plays = new String();
				winner = new String();
				onlinePlayers = new ArrayList<Integer>();
			}
			
			private static final long serialVersionUID = 1L;
			String player_plays,opp_plays;
			int player,opp_id;
			String winner; //Self-> player won, Opp->Opponent won
			ArrayList<Integer> onlinePlayers;//0 offline, 1 available, 2 in game
			int typeOfMessage; //-# the index client wants to be deleted times -1
			//0 Being challenged
			//1 Opponent has been chosen
			//2 Check for Opponent Status
			//3 Player has played
			//4 Sever has the result of the match
			//5 Update the ArrayList
			//6 Opponent Disconnected
		}
}

/*
 * 
 */
	
	

	
